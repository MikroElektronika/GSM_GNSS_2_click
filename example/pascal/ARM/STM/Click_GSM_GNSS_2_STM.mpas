{
Example for GSM_GNSS_2 Click

    Date          : jan 2019.
    Author        : Katarina Perendic

Test configuration STM32 :
    
    MCU              : STM32F107VCT6
    Dev. Board       : EasyMx PRO v7 for STM32
    ARM Compiler ver : v6.1.0.0

---

Description :

The application is composed of three sections :

- System Initialization - Initializes all necessary GPIO pins, UART used for
the communcation with GSM/GNSS module and UART used for infromation logging
- Application Initialization - Initializes driver, power on module and sends few
command for the default module configuration
- Application Task - running in parallel core state machine and checks for call flag.
If call detected parser will hang up call.
Every 3 seconds calls NMEA - GGA command to receive the current position

Additional Functions :

All additional functions such as timer initialization and default handler.

Notes :

- Echo must be turned off for succefull parsing. ( ATE0 )
- UART polling works much better with HFC enabled.
- In case of usage of other MCUs Timer initialization must be adjusted according to your MCU.

}
program Click_GSM_GNSS_2_STM;

uses Click_GSM_GNSS_2_types, Click_GSM_GNSS_2_config, Click_GSM_GNSS_2_timer;

var
    GSM_CMD_AT : array[3] of char; 
    GSM_CMD_ATI : array[4] of char; 
    GSM_CMD_ATE : array[5] of char; 
    GSM_CMD_IFC : array[12] of char; 
    GSM_CMD_CMGF : array[10] of char; 
    GSM_CMD_ATH : array[4] of char; 
    GSM_CMD_CLCC : array[8] of char; 
    GSM_CMD_CPOWD : array[12] of char; 
    GNSS_CMD_CGNSSEQ : array[25] of char; 
    GNSS_CMD_CGNSINF : array[15] of char; 
    GNSS_CMD_CGNSPWR : array[15] of char; 
    
procedure gsmgnss_default_handler(rsp : ^uint8_t; evArgs : ^uint8_t); 
var
    tmp : ^char; 
begin
    tmp := rsp; 
    mikrobus_logWrite(tmp, _LOG_TEXT); 
end;

procedure systemInit(); 
begin
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_PWM_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT); 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT); 
    mikrobus_uartInit(_MIKROBUS1, @_GSMGNSS2_UART_CFG[0]); 
    mikrobus_logInit(_LOG_USBUART_A, 9600); 
    mikrobus_logWrite('---- Start Init ----', _LOG_LINE); 
end;

procedure applicationInit(); 
begin
    gsmgnss2_configTimer(); 
    gsmgnss2_uartDriverInit(T_GSMGNSS2_P(@_MIKROBUS1_GPIO), T_GSMGNSS2_P(@_MIKROBUS1_UART)); 
    gsmgnss2_coreInit(@gsmgnss_default_handler, 1500); 
    gsmgnss2_hfcEnable(1); 
    gsmgnss2_modulePower(1); 
    gsmgnss2_cmdSingle(@GSM_CMD_AT[0]); 
    gsmgnss2_cmdSingle(@GSM_CMD_ATI[0]); 
    gsmgnss2_cmdSingle(@GSM_CMD_ATE[0]); 
    gsmgnss2_cmdSingle(@GSM_CMD_IFC[0]); 
    gsmgnss2_cmdSingle(@GSM_CMD_CMGF[0]); 
    mikrobus_logWrite('---- GSM Init done ---', _LOG_LINE); 
    gsmgnss2_cmdSingle(@GNSS_CMD_CGNSPWR[0]); 
    Delay_ms(3000); 
    mikrobus_logWrite('---- GNSS Init done ---', _LOG_LINE); 
    mikrobus_logWrite('---- Please, call me :) ----', _LOG_LINE); 
end;

procedure applicationTask(); 
begin
    gsmgnss2_process(); 
    if (0 = gsmgnss2_chackRing()) then 
    begin
        gsmgnss2_cmdSingle(@GSM_CMD_CLCC[0]); 
        mikrobus_logWrite('--- Call detected ---', _LOG_LINE); 
        gsmgnss2_cmdSingle(@GSM_CMD_ATH[0]); 
        Delay_ms(3000); 
    end; 
    if (timerCounter > 5000) then 
    begin
        gsmgnss2_cmdSingle(@GNSS_CMD_CGNSSEQ[0]); 
        gsmgnss2_cmdSingle(@GNSS_CMD_CGNSINF[0]); 
        timerCounter := 0; 
    end; 
end;

begin
    GSM_CMD_AT := 'AT';
    GSM_CMD_ATI := 'ATI';
    GSM_CMD_ATE := 'ATE0';
    GSM_CMD_IFC := 'AT+IFC=2,2';
    GSM_CMD_CMGF := 'AT+CMGF=1';
    GSM_CMD_ATH := 'ATH';
    GSM_CMD_CLCC := 'AT+CLCC';
    GSM_CMD_CPOWD := 'AT+CPOWD=1';
    GNSS_CMD_CGNSSEQ := 'AT+CGNSSEQ="GGA"';
    GNSS_CMD_CGNSINF := 'AT+CGNSINF';
    GNSS_CMD_CGNSPWR := 'AT+CGNSPWR=1';

    systemInit(); 
    applicationInit(); 
    while (1) do 
    begin 
        applicationTask(); 
    end;
end.