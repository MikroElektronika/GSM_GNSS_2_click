'
'Example for GSM_GNSS_2 Click
'
'    Date          : Nov 2017.
'    Author        : MikroE Team
'
'Test configuration KINETIS :
'    
'    MCU              : MK64
'    Dev. Board       : HEXIWEAR
'    ARM Compiler ver : v6.1.0.0
'
'---
'
'Description :
'
'The application is composed of three sections :
'
'- System Initialization - Initializes all necessary GPIO pins, UART used for
'the communcation with GSM/GNSS module and UART used for infromation logging
'- Application Initialization - Initializes driver, power on module and sends few
'command for the default module configuration
'- Application Task - running in parallel core state machine and checks for call flag.
'If call detected parser will hang up call.
'Every 3 seconds calls NMEA - GGA command to receive the current position
'
'Additional Functions :
'
'All additional functions such as timer initialization and default handler.
'
'Notes :
'
'- Echo must be turned off for succefull parsing. ( ATE0 )
'- UART polling works much better with HFC enabled.
'- In case of usage of other MCUs Timer initialization must be adjusted according to your MCU.
'
'
program Click_GSM_GNSS_2_KINETIS

include Click_GSM_GNSS_2_types
include Click_GSM_GNSS_2_config
include Click_GSM_GNSS_2_timer
dim
    GSM_CMD_AT as char[3] 
    GSM_CMD_ATI as char[4] 
    GSM_CMD_ATE as char[5] 
    GSM_CMD_IFC as char[12] 
    GSM_CMD_CMGF as char[10] 
    GSM_CMD_ATH as char[4] 
    GSM_CMD_CLCC as char[8] 
    GSM_CMD_CPOWD as char[12] 
    GNSS_CMD_CGNSSEQ as char[25] 
    GNSS_CMD_CGNSINF as char[15] 
    GNSS_CMD_CGNSPWR as char[15] 
    
sub procedure gsmgnss_default_handler(dim rsp as ^uint8_t, dim evArgs as ^uint8_t) 
dim
    tmp as ^char 

    tmp = rsp 
    mikrobus_logWrite(tmp, _LOG_TEXT) 
end sub

sub procedure systemInit() 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_AN_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_PWM_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_INT_PIN, _GPIO_INPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_RST_PIN, _GPIO_OUTPUT) 
    mikrobus_gpioInit(_MIKROBUS1, _MIKROBUS_CS_PIN, _GPIO_OUTPUT) 
    mikrobus_uartInit(_MIKROBUS1, @_GSMGNSS2_UART_CFG[0]) 
    mikrobus_logInit(_LOG_USBUART, 9600) 
    mikrobus_logWrite("---- Start Init ----", _LOG_LINE) 
end sub

sub procedure applicationInit() 
    gsmgnss2_configTimer() 
    gsmgnss2_uartDriverInit(T_GSMGNSS2_P(@_MIKROBUS1_GPIO), T_GSMGNSS2_P(@_MIKROBUS1_UART)) 
    gsmgnss2_coreInit(@gsmgnss_default_handler, 1500) 
    gsmgnss2_hfcEnable(1) 
    gsmgnss2_modulePower(1) 
    gsmgnss2_cmdSingle(@GSM_CMD_AT[0]) 
    gsmgnss2_cmdSingle(@GSM_CMD_ATI[0]) 
    gsmgnss2_cmdSingle(@GSM_CMD_ATE[0]) 
    gsmgnss2_cmdSingle(@GSM_CMD_IFC[0]) 
    gsmgnss2_cmdSingle(@GSM_CMD_CMGF[0]) 
    mikrobus_logWrite("---- GSM Init done ---", _LOG_LINE) 
    gsmgnss2_cmdSingle(@GNSS_CMD_CGNSPWR[0]) 
    Delay_ms(3000) 
    mikrobus_logWrite("---- GNSS Init done ---", _LOG_LINE) 
    mikrobus_logWrite("---- Please, call me :) ----", _LOG_LINE) 
end sub

sub procedure applicationTask() 
    gsmgnss2_process() 
    if (0 = gsmgnss2_chackRing()) then 
        gsmgnss2_cmdSingle(@GSM_CMD_CLCC[0]) 
        mikrobus_logWrite("--- Call detected ---", _LOG_LINE) 
        gsmgnss2_cmdSingle(@GSM_CMD_ATH[0]) 
        Delay_ms(3000) 
    end if
    if (timerCounter > 5000) then 
        gsmgnss2_cmdSingle(@GNSS_CMD_CGNSSEQ[0]) 
        gsmgnss2_cmdSingle(@GNSS_CMD_CGNSINF[0]) 
        timerCounter = 0 
    end if
end sub

main :
    GSM_CMD_AT = "AT"
    GSM_CMD_ATI = "ATI"
    GSM_CMD_ATE = "ATE0"
    GSM_CMD_IFC = "AT+IFC=2,2"
    GSM_CMD_CMGF = "AT+CMGF=1"
    GSM_CMD_ATH = "ATH"
    GSM_CMD_CLCC = "AT+CLCC"
    GSM_CMD_CPOWD = "AT+CPOWD=1"
    GNSS_CMD_CGNSSEQ = "AT+CGNSSEQ=" + Chr(34) + "GGA" + Chr(34)
    GNSS_CMD_CGNSINF = "AT+CGNSINF"
    GNSS_CMD_CGNSPWR = "AT+CGNSPWR=1"

    systemInit() 
    applicationInit() 
    while (1) 
        applicationTask() 
    wend
end.